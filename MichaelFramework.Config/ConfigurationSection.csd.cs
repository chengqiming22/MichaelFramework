//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.269
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace MichaelFramework.Config
{
    
    
    /// <summary>
    /// The CustomSettings Configuration Section.
    /// </summary>
    public partial class CustomSettings : global::System.Configuration.ConfigurationSection
    {
        
        #region Singleton Instance
        /// <summary>
        /// The XML name of the CustomSettings Configuration Section.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        internal const string CustomSettingsSectionName = "customSettings";
        
        /// <summary>
        /// Gets the CustomSettings instance.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        public static global::MichaelFramework.Config.CustomSettings Instance
        {
            get
            {
                return ((global::MichaelFramework.Config.CustomSettings)(global::System.Configuration.ConfigurationManager.GetSection(global::MichaelFramework.Config.CustomSettings.CustomSettingsSectionName)));
            }
        }
        #endregion
        
        #region Xmlns Property
        /// <summary>
        /// The XML name of the <see cref="Xmlns"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        internal const string XmlnsPropertyName = "xmlns";
        
        /// <summary>
        /// Gets the XML namespace of this Configuration Section.
        /// </summary>
        /// <remarks>
        /// This property makes sure that if the configuration file contains the XML namespace,
        /// the parser doesn't throw an exception because it encounters the unknown "xmlns" attribute.
        /// </remarks>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::MichaelFramework.Config.CustomSettings.XmlnsPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public string Xmlns
        {
            get
            {
                return ((string)(base[global::MichaelFramework.Config.CustomSettings.XmlnsPropertyName]));
            }
        }
        #endregion
        
        #region Protection
        /// <summary>
        /// The protection provider to use for Configuration Section Protection
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        internal const string ProtectionProvider = "RSAProtectedConfigurationProvider";
        
        /// <summary>
        /// Marks this Configuration Section for protection.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        public void Protect()
        {
            if ((this.SectionInformation.IsProtected == false))
            {
                this.SectionInformation.ProtectSection(global::MichaelFramework.Config.CustomSettings.ProtectionProvider);
            }
        }
        
        /// <summary>
        /// Removes the protected configuration encryption from the associated configuration section.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        public void Unprotect()
        {
            if ((this.SectionInformation.IsProtected == true))
            {
                this.SectionInformation.UnprotectSection();
            }
        }
        #endregion
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region System Property
        /// <summary>
        /// The XML name of the <see cref="System"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        internal const string SystemPropertyName = "system";
        
        /// <summary>
        /// Gets or sets the System.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        [global::System.ComponentModel.DescriptionAttribute("The System.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::MichaelFramework.Config.CustomSettings.SystemPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public global::MichaelFramework.Config.System System
        {
            get
            {
                return ((global::MichaelFramework.Config.System)(base[global::MichaelFramework.Config.CustomSettings.SystemPropertyName]));
            }
            set
            {
                base[global::MichaelFramework.Config.CustomSettings.SystemPropertyName] = value;
            }
        }
        #endregion
        
        #region Application Property
        /// <summary>
        /// The XML name of the <see cref="Application"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        internal const string ApplicationPropertyName = "application";
        
        /// <summary>
        /// Gets or sets the Application.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        [global::System.ComponentModel.DescriptionAttribute("The Application.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::MichaelFramework.Config.CustomSettings.ApplicationPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public global::MichaelFramework.Config.App Application
        {
            get
            {
                return ((global::MichaelFramework.Config.App)(base[global::MichaelFramework.Config.CustomSettings.ApplicationPropertyName]));
            }
            set
            {
                base[global::MichaelFramework.Config.CustomSettings.ApplicationPropertyName] = value;
            }
        }
        #endregion
    }
}
namespace MichaelFramework.Config
{
    
    
    /// <summary>
    /// A collection of SingleUser instances.
    /// </summary>
    [global::System.Configuration.ConfigurationCollectionAttribute(typeof(global::MichaelFramework.Config.SingleUser), CollectionType=global::System.Configuration.ConfigurationElementCollectionType.BasicMapAlternate, AddItemName=global::MichaelFramework.Config.Users.SingleUserPropertyName)]
    public partial class Users : global::System.Configuration.ConfigurationElementCollection
    {
        
        #region Constants
        /// <summary>
        /// The XML name of the individual <see cref="global::MichaelFramework.Config.SingleUser"/> instances in this collection.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        internal const string SingleUserPropertyName = "singleUser";
        #endregion
        
        #region Overrides
        /// <summary>
        /// Gets the type of the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <returns>The <see cref="global::System.Configuration.ConfigurationElementCollectionType"/> of this collection.</returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        public override global::System.Configuration.ConfigurationElementCollectionType CollectionType
        {
            get
            {
                return global::System.Configuration.ConfigurationElementCollectionType.BasicMapAlternate;
            }
        }
        
        /// <summary>
        /// Gets the name used to identify this collection of elements
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        protected override string ElementName
        {
            get
            {
                return global::MichaelFramework.Config.Users.SingleUserPropertyName;
            }
        }
        
        /// <summary>
        /// Indicates whether the specified <see cref="global::System.Configuration.ConfigurationElement"/> exists in the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="elementName">The name of the element to verify.</param>
        /// <returns>
        /// <see langword="true"/> if the element exists in the collection; otherwise, <see langword="false"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        protected override bool IsElementName(string elementName)
        {
            return (elementName == global::MichaelFramework.Config.Users.SingleUserPropertyName);
        }
        
        /// <summary>
        /// Gets the element key for the specified configuration element.
        /// </summary>
        /// <param name="element">The <see cref="global::System.Configuration.ConfigurationElement"/> to return the key for.</param>
        /// <returns>
        /// An <see cref="object"/> that acts as the key for the specified <see cref="global::System.Configuration.ConfigurationElement"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        protected override object GetElementKey(global::System.Configuration.ConfigurationElement element)
        {
            return ((global::MichaelFramework.Config.SingleUser)(element)).Id;
        }
        
        /// <summary>
        /// Creates a new <see cref="global::MichaelFramework.Config.SingleUser"/>.
        /// </summary>
        /// <returns>
        /// A new <see cref="global::MichaelFramework.Config.SingleUser"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        protected override global::System.Configuration.ConfigurationElement CreateNewElement()
        {
            return new global::MichaelFramework.Config.SingleUser();
        }
        #endregion
        
        #region Indexer
        /// <summary>
        /// Gets the <see cref="global::MichaelFramework.Config.SingleUser"/> at the specified index.
        /// </summary>
        /// <param name="index">The index of the <see cref="global::MichaelFramework.Config.SingleUser"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        public global::MichaelFramework.Config.SingleUser this[int index]
        {
            get
            {
                return ((global::MichaelFramework.Config.SingleUser)(base.BaseGet(index)));
            }
        }
        
        /// <summary>
        /// Gets the <see cref="global::MichaelFramework.Config.SingleUser"/> with the specified key.
        /// </summary>
        /// <param name="id">The key of the <see cref="global::MichaelFramework.Config.SingleUser"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        public global::MichaelFramework.Config.SingleUser this[object id]
        {
            get
            {
                return ((global::MichaelFramework.Config.SingleUser)(base.BaseGet(id)));
            }
        }
        #endregion
        
        #region Add
        /// <summary>
        /// Adds the specified <see cref="global::MichaelFramework.Config.SingleUser"/> to the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="singleUser">The <see cref="global::MichaelFramework.Config.SingleUser"/> to add.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        public void Add(global::MichaelFramework.Config.SingleUser singleUser)
        {
            base.BaseAdd(singleUser);
        }
        #endregion
        
        #region Remove
        /// <summary>
        /// Removes the specified <see cref="global::MichaelFramework.Config.SingleUser"/> from the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="singleUser">The <see cref="global::MichaelFramework.Config.SingleUser"/> to remove.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        public void Remove(global::MichaelFramework.Config.SingleUser singleUser)
        {
            base.BaseRemove(this.GetElementKey(singleUser));
        }
        #endregion
        
        #region GetItem
        /// <summary>
        /// Gets the <see cref="global::MichaelFramework.Config.SingleUser"/> at the specified index.
        /// </summary>
        /// <param name="index">The index of the <see cref="global::MichaelFramework.Config.SingleUser"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        public global::MichaelFramework.Config.SingleUser GetItemAt(int index)
        {
            return ((global::MichaelFramework.Config.SingleUser)(base.BaseGet(index)));
        }
        
        /// <summary>
        /// Gets the <see cref="global::MichaelFramework.Config.SingleUser"/> with the specified key.
        /// </summary>
        /// <param name="id">The key of the <see cref="global::MichaelFramework.Config.SingleUser"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        public global::MichaelFramework.Config.SingleUser GetItemByKey(global::System.Guid id)
        {
            return ((global::MichaelFramework.Config.SingleUser)(base.BaseGet(((object)(id)))));
        }
        #endregion
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
    }
}
namespace MichaelFramework.Config
{
    
    
    /// <summary>
    /// The SingleUser Configuration Element.
    /// </summary>
    public partial class SingleUser : global::System.Configuration.ConfigurationElement
    {
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region Id Property
        /// <summary>
        /// The XML name of the <see cref="Id"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        internal const string IdPropertyName = "id";
        
        /// <summary>
        /// Gets or sets the Id.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        [global::System.ComponentModel.DescriptionAttribute("The Id.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::MichaelFramework.Config.SingleUser.IdPropertyName, IsRequired=true, IsKey=true, IsDefaultCollection=false)]
        public global::System.Guid Id
        {
            get
            {
                return ((global::System.Guid)(base[global::MichaelFramework.Config.SingleUser.IdPropertyName]));
            }
            set
            {
                base[global::MichaelFramework.Config.SingleUser.IdPropertyName] = value;
            }
        }
        #endregion
        
        #region MainForm Property
        /// <summary>
        /// The XML name of the <see cref="MainForm"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        internal const string MainFormPropertyName = "mainForm";
        
        /// <summary>
        /// Gets or sets the MainForm.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        [global::System.ComponentModel.DescriptionAttribute("The MainForm.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::MichaelFramework.Config.SingleUser.MainFormPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public global::MichaelFramework.Config.MainForm MainForm
        {
            get
            {
                return ((global::MichaelFramework.Config.MainForm)(base[global::MichaelFramework.Config.SingleUser.MainFormPropertyName]));
            }
            set
            {
                base[global::MichaelFramework.Config.SingleUser.MainFormPropertyName] = value;
            }
        }
        #endregion
    }
}
namespace MichaelFramework.Config
{
    
    
    /// <summary>
    /// The App Configuration Element.
    /// </summary>
    public partial class App : global::System.Configuration.ConfigurationElement
    {
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region Name Property
        /// <summary>
        /// The XML name of the <see cref="Name"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        internal const string NamePropertyName = "name";
        
        /// <summary>
        /// Gets or sets the Name.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        [global::System.ComponentModel.DescriptionAttribute("The Name.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::MichaelFramework.Config.App.NamePropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false, DefaultValue="MichaelFramework")]
        public string Name
        {
            get
            {
                return ((string)(base[global::MichaelFramework.Config.App.NamePropertyName]));
            }
            set
            {
                base[global::MichaelFramework.Config.App.NamePropertyName] = value;
            }
        }
        #endregion
        
        #region AllowMultiStartup Property
        /// <summary>
        /// The XML name of the <see cref="AllowMultiStartup"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        internal const string AllowMultiStartupPropertyName = "allowMultiStartup";
        
        /// <summary>
        /// Gets or sets the AllowMultiStartup.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        [global::System.ComponentModel.DescriptionAttribute("The AllowMultiStartup.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::MichaelFramework.Config.App.AllowMultiStartupPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false, DefaultValue="True")]
        public bool AllowMultiStartup
        {
            get
            {
                return ((bool)(base[global::MichaelFramework.Config.App.AllowMultiStartupPropertyName]));
            }
            set
            {
                base[global::MichaelFramework.Config.App.AllowMultiStartupPropertyName] = value;
            }
        }
        #endregion
        
        #region RunCount Property
        /// <summary>
        /// The XML name of the <see cref="RunCount"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        internal const string RunCountPropertyName = "runCount";
        
        /// <summary>
        /// Gets or sets the RunCount.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        [global::System.ComponentModel.DescriptionAttribute("The RunCount.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::MichaelFramework.Config.App.RunCountPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public int RunCount
        {
            get
            {
                return ((int)(base[global::MichaelFramework.Config.App.RunCountPropertyName]));
            }
            set
            {
                base[global::MichaelFramework.Config.App.RunCountPropertyName] = value;
            }
        }
        #endregion
        
        #region LoginForm Property
        /// <summary>
        /// The XML name of the <see cref="LoginForm"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        internal const string LoginFormPropertyName = "loginForm";
        
        /// <summary>
        /// Gets or sets the LoginForm.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        [global::System.ComponentModel.DescriptionAttribute("The LoginForm.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::MichaelFramework.Config.App.LoginFormPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public global::MichaelFramework.Config.LoginForm LoginForm
        {
            get
            {
                return ((global::MichaelFramework.Config.LoginForm)(base[global::MichaelFramework.Config.App.LoginFormPropertyName]));
            }
            set
            {
                base[global::MichaelFramework.Config.App.LoginFormPropertyName] = value;
            }
        }
        #endregion
        
        #region MainForm Property
        /// <summary>
        /// The XML name of the <see cref="MainForm"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        internal const string MainFormPropertyName = "mainForm";
        
        /// <summary>
        /// Gets or sets the MainForm.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        [global::System.ComponentModel.DescriptionAttribute("The MainForm.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::MichaelFramework.Config.App.MainFormPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public global::MichaelFramework.Config.MainForm MainForm
        {
            get
            {
                return ((global::MichaelFramework.Config.MainForm)(base[global::MichaelFramework.Config.App.MainFormPropertyName]));
            }
            set
            {
                base[global::MichaelFramework.Config.App.MainFormPropertyName] = value;
            }
        }
        #endregion
        
        #region Users Property
        /// <summary>
        /// The XML name of the <see cref="Users"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        internal const string UsersPropertyName = "users";
        
        /// <summary>
        /// Gets or sets the Users.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        [global::System.ComponentModel.DescriptionAttribute("The Users.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::MichaelFramework.Config.App.UsersPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public global::MichaelFramework.Config.Users Users
        {
            get
            {
                return ((global::MichaelFramework.Config.Users)(base[global::MichaelFramework.Config.App.UsersPropertyName]));
            }
            set
            {
                base[global::MichaelFramework.Config.App.UsersPropertyName] = value;
            }
        }
        #endregion
    }
}
namespace MichaelFramework.Config
{
    
    
    /// <summary>
    /// The LoginForm Configuration Element.
    /// </summary>
    public partial class LoginForm : global::System.Configuration.ConfigurationElement
    {
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region AssemblyQualifiedName Property
        /// <summary>
        /// The XML name of the <see cref="AssemblyQualifiedName"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        internal const string AssemblyQualifiedNamePropertyName = "assemblyQualifiedName";
        
        /// <summary>
        /// Gets or sets the AssemblyQualifiedName.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        [global::System.ComponentModel.DescriptionAttribute("The AssemblyQualifiedName.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::MichaelFramework.Config.LoginForm.AssemblyQualifiedNamePropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public string AssemblyQualifiedName
        {
            get
            {
                return ((string)(base[global::MichaelFramework.Config.LoginForm.AssemblyQualifiedNamePropertyName]));
            }
            set
            {
                base[global::MichaelFramework.Config.LoginForm.AssemblyQualifiedNamePropertyName] = value;
            }
        }
        #endregion
        
        #region AccessedUsers Property
        /// <summary>
        /// The XML name of the <see cref="AccessedUsers"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        internal const string AccessedUsersPropertyName = "accessedUsers";
        
        /// <summary>
        /// Gets or sets the AccessedUsers.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        [global::System.ComponentModel.DescriptionAttribute("The AccessedUsers.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::MichaelFramework.Config.LoginForm.AccessedUsersPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public string AccessedUsers
        {
            get
            {
                return ((string)(base[global::MichaelFramework.Config.LoginForm.AccessedUsersPropertyName]));
            }
            set
            {
                base[global::MichaelFramework.Config.LoginForm.AccessedUsersPropertyName] = value;
            }
        }
        #endregion
        
        #region Title Property
        /// <summary>
        /// The XML name of the <see cref="Title"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        internal const string TitlePropertyName = "title";
        
        /// <summary>
        /// Gets or sets the Title.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        [global::System.ComponentModel.DescriptionAttribute("The Title.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::MichaelFramework.Config.LoginForm.TitlePropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false, DefaultValue="登录")]
        public string Title
        {
            get
            {
                return ((string)(base[global::MichaelFramework.Config.LoginForm.TitlePropertyName]));
            }
            set
            {
                base[global::MichaelFramework.Config.LoginForm.TitlePropertyName] = value;
            }
        }
        #endregion
    }
}
namespace MichaelFramework.Config
{
    
    
    /// <summary>
    /// The MainForm Configuration Element.
    /// </summary>
    public partial class MainForm : global::System.Configuration.ConfigurationElement
    {
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region AssemblyQualifiedName Property
        /// <summary>
        /// The XML name of the <see cref="AssemblyQualifiedName"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        internal const string AssemblyQualifiedNamePropertyName = "assemblyQualifiedName";
        
        /// <summary>
        /// Gets or sets the AssemblyQualifiedName.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        [global::System.ComponentModel.DescriptionAttribute("The AssemblyQualifiedName.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::MichaelFramework.Config.MainForm.AssemblyQualifiedNamePropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public string AssemblyQualifiedName
        {
            get
            {
                return ((string)(base[global::MichaelFramework.Config.MainForm.AssemblyQualifiedNamePropertyName]));
            }
            set
            {
                base[global::MichaelFramework.Config.MainForm.AssemblyQualifiedNamePropertyName] = value;
            }
        }
        #endregion
        
        #region Bounds Property
        /// <summary>
        /// The XML name of the <see cref="Bounds"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        internal const string BoundsPropertyName = "bounds";
        
        /// <summary>
        /// Gets or sets the Bounds.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        [global::System.ComponentModel.DescriptionAttribute("The Bounds.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::MichaelFramework.Config.MainForm.BoundsPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false, DefaultValue="0,0,800,600")]
        public global::System.Drawing.Rectangle Bounds
        {
            get
            {
                return ((global::System.Drawing.Rectangle)(base[global::MichaelFramework.Config.MainForm.BoundsPropertyName]));
            }
            set
            {
                base[global::MichaelFramework.Config.MainForm.BoundsPropertyName] = value;
            }
        }
        #endregion
        
        #region Style Property
        /// <summary>
        /// The XML name of the <see cref="Style"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        internal const string StylePropertyName = "style";
        
        /// <summary>
        /// Gets or sets the Style.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        [global::System.ComponentModel.DescriptionAttribute("The Style.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::MichaelFramework.Config.MainForm.StylePropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public global::DevComponents.DotNetBar.eStyle Style
        {
            get
            {
                return ((global::DevComponents.DotNetBar.eStyle)(base[global::MichaelFramework.Config.MainForm.StylePropertyName]));
            }
            set
            {
                base[global::MichaelFramework.Config.MainForm.StylePropertyName] = value;
            }
        }
        #endregion
        
        #region ColorTint Property
        /// <summary>
        /// The XML name of the <see cref="ColorTint"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        internal const string ColorTintPropertyName = "colorTint";
        
        /// <summary>
        /// Gets or sets the ColorTint.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        [global::System.ComponentModel.DescriptionAttribute("The ColorTint.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::MichaelFramework.Config.MainForm.ColorTintPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public global::System.Drawing.Color ColorTint
        {
            get
            {
                return ((global::System.Drawing.Color)(base[global::MichaelFramework.Config.MainForm.ColorTintPropertyName]));
            }
            set
            {
                base[global::MichaelFramework.Config.MainForm.ColorTintPropertyName] = value;
            }
        }
        #endregion
        
        #region WindowState Property
        /// <summary>
        /// The XML name of the <see cref="WindowState"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        internal const string WindowStatePropertyName = "windowState";
        
        /// <summary>
        /// Gets or sets the WindowState.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        [global::System.ComponentModel.DescriptionAttribute("The WindowState.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::MichaelFramework.Config.MainForm.WindowStatePropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public global::System.Windows.Forms.FormWindowState WindowState
        {
            get
            {
                return ((global::System.Windows.Forms.FormWindowState)(base[global::MichaelFramework.Config.MainForm.WindowStatePropertyName]));
            }
            set
            {
                base[global::MichaelFramework.Config.MainForm.WindowStatePropertyName] = value;
            }
        }
        #endregion
        
        #region LeftPaneState Property
        /// <summary>
        /// The XML name of the <see cref="LeftPaneState"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        internal const string LeftPaneStatePropertyName = "leftPaneState";
        
        /// <summary>
        /// Gets or sets the LeftPaneState.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        [global::System.ComponentModel.DescriptionAttribute("The LeftPaneState.")]
        [global::System.ComponentModel.TypeConverter(typeof(global::MichaelFramework.Config.PaneStateTypeConverter))]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::MichaelFramework.Config.MainForm.LeftPaneStatePropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false, DefaultValue="Visible=True,Expanded=True,WidthOrHeight=180")]
        public global::MichaelFramework.Utils.PaneState LeftPaneState
        {
            get
            {
                return ((global::MichaelFramework.Utils.PaneState)(base[global::MichaelFramework.Config.MainForm.LeftPaneStatePropertyName]));
            }
            set
            {
                base[global::MichaelFramework.Config.MainForm.LeftPaneStatePropertyName] = value;
            }
        }
        #endregion
        
        #region RightPaneState Property
        /// <summary>
        /// The XML name of the <see cref="RightPaneState"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        internal const string RightPaneStatePropertyName = "rightPaneState";
        
        /// <summary>
        /// Gets or sets the RightPaneState.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        [global::System.ComponentModel.DescriptionAttribute("The RightPaneState.")]
        [global::System.ComponentModel.TypeConverter(typeof(global::MichaelFramework.Config.PaneStateTypeConverter))]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::MichaelFramework.Config.MainForm.RightPaneStatePropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false, DefaultValue="Visible=False,Expanded=True,WidthOrHeight=180")]
        public global::MichaelFramework.Utils.PaneState RightPaneState
        {
            get
            {
                return ((global::MichaelFramework.Utils.PaneState)(base[global::MichaelFramework.Config.MainForm.RightPaneStatePropertyName]));
            }
            set
            {
                base[global::MichaelFramework.Config.MainForm.RightPaneStatePropertyName] = value;
            }
        }
        #endregion
        
        #region SelectedRibbonTabIndex Property
        /// <summary>
        /// The XML name of the <see cref="SelectedRibbonTabIndex"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        internal const string SelectedRibbonTabIndexPropertyName = "selectedRibbonTabIndex";
        
        /// <summary>
        /// Gets or sets the SelectedRibbonTabIndex.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        [global::System.ComponentModel.DescriptionAttribute("The SelectedRibbonTabIndex.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::MichaelFramework.Config.MainForm.SelectedRibbonTabIndexPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false, DefaultValue=0)]
        public int SelectedRibbonTabIndex
        {
            get
            {
                return ((int)(base[global::MichaelFramework.Config.MainForm.SelectedRibbonTabIndexPropertyName]));
            }
            set
            {
                base[global::MichaelFramework.Config.MainForm.SelectedRibbonTabIndexPropertyName] = value;
            }
        }
        #endregion
        
        #region BottomPaneState Property
        /// <summary>
        /// The XML name of the <see cref="BottomPaneState"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        internal const string BottomPaneStatePropertyName = "bottomPaneState";
        
        /// <summary>
        /// Gets or sets the BottomPaneState.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        [global::System.ComponentModel.DescriptionAttribute("The BottomPaneState.")]
        [global::System.ComponentModel.TypeConverter(typeof(global::MichaelFramework.Config.PaneStateTypeConverter))]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::MichaelFramework.Config.MainForm.BottomPaneStatePropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false, DefaultValue="Visible=False,Expanded=True,WidthOrHeight=180")]
        public global::MichaelFramework.Utils.PaneState BottomPaneState
        {
            get
            {
                return ((global::MichaelFramework.Utils.PaneState)(base[global::MichaelFramework.Config.MainForm.BottomPaneStatePropertyName]));
            }
            set
            {
                base[global::MichaelFramework.Config.MainForm.BottomPaneStatePropertyName] = value;
            }
        }
        #endregion
        
        #region RibbonControlExpanded Property
        /// <summary>
        /// The XML name of the <see cref="RibbonControlExpanded"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        internal const string RibbonControlExpandedPropertyName = "ribbonControlExpanded";
        
        /// <summary>
        /// Gets or sets the RibbonControlExpanded.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        [global::System.ComponentModel.DescriptionAttribute("The RibbonControlExpanded.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::MichaelFramework.Config.MainForm.RibbonControlExpandedPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public bool RibbonControlExpanded
        {
            get
            {
                return ((bool)(base[global::MichaelFramework.Config.MainForm.RibbonControlExpandedPropertyName]));
            }
            set
            {
                base[global::MichaelFramework.Config.MainForm.RibbonControlExpandedPropertyName] = value;
            }
        }
        #endregion
    }
}
namespace MichaelFramework.Config
{
    
    
    /// <summary>
    /// The System Configuration Element.
    /// </summary>
    public partial class System : global::System.Configuration.ConfigurationElement
    {
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region UsePermissionControl Property
        /// <summary>
        /// The XML name of the <see cref="UsePermissionControl"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        internal const string UsePermissionControlPropertyName = "usePermissionControl";
        
        /// <summary>
        /// Gets or sets the UsePermissionControl.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        [global::System.ComponentModel.DescriptionAttribute("The UsePermissionControl.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::MichaelFramework.Config.System.UsePermissionControlPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public bool UsePermissionControl
        {
            get
            {
                return ((bool)(base[global::MichaelFramework.Config.System.UsePermissionControlPropertyName]));
            }
            set
            {
                base[global::MichaelFramework.Config.System.UsePermissionControlPropertyName] = value;
            }
        }
        #endregion
        
        #region DataDirectory Property
        /// <summary>
        /// The XML name of the <see cref="DataDirectory"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        internal const string DataDirectoryPropertyName = "dataDirectory";
        
        /// <summary>
        /// Gets or sets the DataDirectory.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        [global::System.ComponentModel.DescriptionAttribute("The DataDirectory.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::MichaelFramework.Config.System.DataDirectoryPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public string DataDirectory
        {
            get
            {
                return ((string)(base[global::MichaelFramework.Config.System.DataDirectoryPropertyName]));
            }
            set
            {
                base[global::MichaelFramework.Config.System.DataDirectoryPropertyName] = value;
            }
        }
        #endregion
        
        #region CustomInit Property
        /// <summary>
        /// The XML name of the <see cref="CustomInit"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        internal const string CustomInitPropertyName = "customInit";
        
        /// <summary>
        /// Gets or sets the CustomInit.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        [global::System.ComponentModel.DescriptionAttribute("The CustomInit.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::MichaelFramework.Config.System.CustomInitPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public global::MichaelFramework.Config.CustomInit CustomInit
        {
            get
            {
                return ((global::MichaelFramework.Config.CustomInit)(base[global::MichaelFramework.Config.System.CustomInitPropertyName]));
            }
            set
            {
                base[global::MichaelFramework.Config.System.CustomInitPropertyName] = value;
            }
        }
        #endregion
    }
}
namespace MichaelFramework.Config
{
    
    
    /// <summary>
    /// A collection of CustomInitItem instances.
    /// </summary>
    [global::System.Configuration.ConfigurationCollectionAttribute(typeof(global::MichaelFramework.Config.CustomInitItem), CollectionType=global::System.Configuration.ConfigurationElementCollectionType.BasicMapAlternate, AddItemName=global::MichaelFramework.Config.CustomInit.CustomInitItemPropertyName)]
    public partial class CustomInit : global::System.Configuration.ConfigurationElementCollection
    {
        
        #region Constants
        /// <summary>
        /// The XML name of the individual <see cref="global::MichaelFramework.Config.CustomInitItem"/> instances in this collection.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        internal const string CustomInitItemPropertyName = "customInitItem";
        #endregion
        
        #region Overrides
        /// <summary>
        /// Gets the type of the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <returns>The <see cref="global::System.Configuration.ConfigurationElementCollectionType"/> of this collection.</returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        public override global::System.Configuration.ConfigurationElementCollectionType CollectionType
        {
            get
            {
                return global::System.Configuration.ConfigurationElementCollectionType.BasicMapAlternate;
            }
        }
        
        /// <summary>
        /// Gets the name used to identify this collection of elements
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        protected override string ElementName
        {
            get
            {
                return global::MichaelFramework.Config.CustomInit.CustomInitItemPropertyName;
            }
        }
        
        /// <summary>
        /// Indicates whether the specified <see cref="global::System.Configuration.ConfigurationElement"/> exists in the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="elementName">The name of the element to verify.</param>
        /// <returns>
        /// <see langword="true"/> if the element exists in the collection; otherwise, <see langword="false"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        protected override bool IsElementName(string elementName)
        {
            return (elementName == global::MichaelFramework.Config.CustomInit.CustomInitItemPropertyName);
        }
        
        /// <summary>
        /// Gets the element key for the specified configuration element.
        /// </summary>
        /// <param name="element">The <see cref="global::System.Configuration.ConfigurationElement"/> to return the key for.</param>
        /// <returns>
        /// An <see cref="object"/> that acts as the key for the specified <see cref="global::System.Configuration.ConfigurationElement"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        protected override object GetElementKey(global::System.Configuration.ConfigurationElement element)
        {
            return ((global::MichaelFramework.Config.CustomInitItem)(element)).Key;
        }
        
        /// <summary>
        /// Creates a new <see cref="global::MichaelFramework.Config.CustomInitItem"/>.
        /// </summary>
        /// <returns>
        /// A new <see cref="global::MichaelFramework.Config.CustomInitItem"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        protected override global::System.Configuration.ConfigurationElement CreateNewElement()
        {
            return new global::MichaelFramework.Config.CustomInitItem();
        }
        #endregion
        
        #region Indexer
        /// <summary>
        /// Gets the <see cref="global::MichaelFramework.Config.CustomInitItem"/> at the specified index.
        /// </summary>
        /// <param name="index">The index of the <see cref="global::MichaelFramework.Config.CustomInitItem"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        public global::MichaelFramework.Config.CustomInitItem this[int index]
        {
            get
            {
                return ((global::MichaelFramework.Config.CustomInitItem)(base.BaseGet(index)));
            }
        }
        
        /// <summary>
        /// Gets the <see cref="global::MichaelFramework.Config.CustomInitItem"/> with the specified key.
        /// </summary>
        /// <param name="key">The key of the <see cref="global::MichaelFramework.Config.CustomInitItem"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        public global::MichaelFramework.Config.CustomInitItem this[object key]
        {
            get
            {
                return ((global::MichaelFramework.Config.CustomInitItem)(base.BaseGet(key)));
            }
        }
        #endregion
        
        #region Add
        /// <summary>
        /// Adds the specified <see cref="global::MichaelFramework.Config.CustomInitItem"/> to the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="customInitItem">The <see cref="global::MichaelFramework.Config.CustomInitItem"/> to add.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        public void Add(global::MichaelFramework.Config.CustomInitItem customInitItem)
        {
            base.BaseAdd(customInitItem);
        }
        #endregion
        
        #region Remove
        /// <summary>
        /// Removes the specified <see cref="global::MichaelFramework.Config.CustomInitItem"/> from the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="customInitItem">The <see cref="global::MichaelFramework.Config.CustomInitItem"/> to remove.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        public void Remove(global::MichaelFramework.Config.CustomInitItem customInitItem)
        {
            base.BaseRemove(this.GetElementKey(customInitItem));
        }
        #endregion
        
        #region GetItem
        /// <summary>
        /// Gets the <see cref="global::MichaelFramework.Config.CustomInitItem"/> at the specified index.
        /// </summary>
        /// <param name="index">The index of the <see cref="global::MichaelFramework.Config.CustomInitItem"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        public global::MichaelFramework.Config.CustomInitItem GetItemAt(int index)
        {
            return ((global::MichaelFramework.Config.CustomInitItem)(base.BaseGet(index)));
        }
        
        /// <summary>
        /// Gets the <see cref="global::MichaelFramework.Config.CustomInitItem"/> with the specified key.
        /// </summary>
        /// <param name="key">The key of the <see cref="global::MichaelFramework.Config.CustomInitItem"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        public global::MichaelFramework.Config.CustomInitItem GetItemByKey(string key)
        {
            return ((global::MichaelFramework.Config.CustomInitItem)(base.BaseGet(((object)(key)))));
        }
        #endregion
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
    }
}
namespace MichaelFramework.Config
{
    
    
    /// <summary>
    /// The CustomInitItem Configuration Element.
    /// </summary>
    public partial class CustomInitItem : global::System.Configuration.ConfigurationElement
    {
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region Key Property
        /// <summary>
        /// The XML name of the <see cref="Key"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        internal const string KeyPropertyName = "key";
        
        /// <summary>
        /// Gets or sets the Key.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        [global::System.ComponentModel.DescriptionAttribute("The Key.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::MichaelFramework.Config.CustomInitItem.KeyPropertyName, IsRequired=true, IsKey=true, IsDefaultCollection=false)]
        public string Key
        {
            get
            {
                return ((string)(base[global::MichaelFramework.Config.CustomInitItem.KeyPropertyName]));
            }
            set
            {
                base[global::MichaelFramework.Config.CustomInitItem.KeyPropertyName] = value;
            }
        }
        #endregion
        
        #region Type Property
        /// <summary>
        /// The XML name of the <see cref="Type"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        internal const string TypePropertyName = "type";
        
        /// <summary>
        /// Gets or sets the Type.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        [global::System.ComponentModel.DescriptionAttribute("The Type.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::MichaelFramework.Config.CustomInitItem.TypePropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public string Type
        {
            get
            {
                return ((string)(base[global::MichaelFramework.Config.CustomInitItem.TypePropertyName]));
            }
            set
            {
                base[global::MichaelFramework.Config.CustomInitItem.TypePropertyName] = value;
            }
        }
        #endregion
        
        #region Method Property
        /// <summary>
        /// The XML name of the <see cref="Method"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        internal const string MethodPropertyName = "method";
        
        /// <summary>
        /// Gets or sets the Method.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        [global::System.ComponentModel.DescriptionAttribute("The Method.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::MichaelFramework.Config.CustomInitItem.MethodPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public string Method
        {
            get
            {
                return ((string)(base[global::MichaelFramework.Config.CustomInitItem.MethodPropertyName]));
            }
            set
            {
                base[global::MichaelFramework.Config.CustomInitItem.MethodPropertyName] = value;
            }
        }
        #endregion
    }
}
namespace MichaelFramework.Model
{
    
    
    /// <summary>
    /// eModelType.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
    public enum eModelType
    {
        
        /// <summary>
        /// Type.
        /// </summary>
        Type = 0,
        
        /// <summary>
        /// Assembly.
        /// </summary>
        Assembly = 1,
    }
}
namespace MichaelFramework.Config
{
    
    
    /// <summary>
    /// PaneStateTypeConverter Custom Converter
    /// </summary>
    public partial class PaneStateTypeConverter : global::System.Configuration.ConfigurationConverterBase
    {
        
        /// <summary>
        /// Converts from <see cref="string" /> to <see cref="global::MichaelFramework.Utils.PaneState" />.
        /// </summary>
        /// <param name="context">The <see cref="global::System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
        /// <param name="culture">The <see cref="global::System.Globalization.CultureInfo" /> to use as the current culture.</param>
        /// <param name="value">The <see cref="string" /> to convert from.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        public override object ConvertFrom(global::System.ComponentModel.ITypeDescriptorContext context, global::System.Globalization.CultureInfo culture, object value)
        {
            // IMPORTANT NOTE: The code below does not build by default.
            // This is a custom type validator that must be implemented
            // for it to build. Place the following in a separate file
            // and implement the method.
            // 
            // public partial class PaneStateTypeConverter
            // {
            //     
            //     private global::MichaelFramework.Utils.PaneState ConvertFromStringToPaneState(global::System.ComponentModel.ITypeDescriptorContext context, global::System.Globalization.CultureInfo culture, string value)
            //     {
            //         throw new global::System.NotImplementedException();
            //     }
            // }
            // 
            return this.ConvertFromStringToPaneState(context, culture, ((string)(value)));
        }
        
        /// <summary>
        /// Converts from <see cref="global::MichaelFramework.Utils.PaneState" /> to <see cref="string" />.
        /// </summary>
        /// <param name="context">The <see cref="global::System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
        /// <param name="culture">The <see cref="global::System.Globalization.CultureInfo" /> to use as the current culture.</param>
        /// <param name="value">The <see cref="string" /> to convert from.</param>
        /// <param name="type">The <see cref="global::System.Type" /> to convert the value parameter to.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        public override object ConvertTo(global::System.ComponentModel.ITypeDescriptorContext context, global::System.Globalization.CultureInfo culture, object value, global::System.Type type)
        {
            // IMPORTANT NOTE: The code below does not build by default.
            // This is a custom type validator that must be implemented
            // for it to build. Place the following in a separate file
            // and implement the method.
            // 
            // public partial class PaneStateTypeConverter
            // {
            //     
            //     private string ConvertToPaneStateFromString(global::System.ComponentModel.ITypeDescriptorContext context, global::System.Globalization.CultureInfo culture, global::MichaelFramework.Utils.PaneState value, global::System.Type type)
            //     {
            //         return value.ToString();
            //     }
            // }
            // 
            return this.ConvertToPaneStateFromString(context, culture, ((global::MichaelFramework.Utils.PaneState)(value)), type);
        }
    }
}
